1 - top de paises que compraram mais o item X (DONE)

SELECT 
    dim_costumers.formalname, 
    COUNT(ft_orderlines.orderlineid) AS total_items 
FROM 
    dim_costumers 
    INNER JOIN ft_orderlines ON dim_costumers.customerkey = ft_orderlines.customerkey 
    INNER JOIN dim_stockitems ON ft_orderlines.stockitemkey = dim_stockitems.stockitemkey 
WHERE 
    dim_stockitems.stockitemkey = 6 
GROUP BY 
    dim_costumers.formalname 
ORDER BY 
    total_items DESC 
-- LIMIT 10;
-- Trocar stockitemkey pelo item

---------------------------------------------------------------------------------

2 - top de items mais comprados no WWI (+ mês com mais tendencia) (DONE)

SELECT 
    dim_stockitems.stockitemname, 
    COUNT(ft_orderlines.orderlineid) AS total_items 
FROM 
    ft_orderlines 
    INNER JOIN dim_stockitems ON ft_orderlines.stockitemkey = dim_stockitems.stockitemkey 
GROUP BY 
    dim_stockitems.stockitemname 
ORDER BY 
    total_items DESC 

---------------------------------------------------------------------------------

3 - top pessoas que mais fizeram encomendas (DONE)

SELECT 
    dim_costumers.customername, 
    COUNT(ft_orderlines.orderlineid) AS total_items 
FROM 
    ft_orderlines 
    INNER JOIN dim_costumers ON ft_orderlines.customerkey = dim_costumers.customerkey 
GROUP BY 
    dim_costumers.customername
ORDER BY 
    total_items DESC 

---------------------------------------------------------------------------------

4 - Mes que mais vendas tem (DONE)

SELECT 
    DATE_TRUNC('month', ft_orderlines.orderdate) AS order_month, 
    COUNT(DISTINCT ft_orderlines.orderid) AS total_orders 
FROM 
    ft_orderlines 
WHERE 
    ft_orderlines.orderdate >= DATE_TRUNC('year', CURRENT_DATE - INTERVAL '15' YEAR)
    AND ft_orderlines.orderdate < DATE_TRUNC('year', CURRENT_DATE) 
GROUP BY 
    order_month 
ORDER BY 
    total_orders DESC 
LIMIT 1;
--Meti 15 porque nao sabia que ano estava na BD, para fazer do ultimo ano, meter '1'

---------------------------------------------------------------------------------

5 - Top invoicelines com mais lucro (DONE)

SELECT 
    ft_invoicelines.invoiceid, 
    SUM(ft_invoicelines.extendedprice) AS revenue,
    SUM(ft_invoicelines.lineprofit) AS profit
FROM 
    ft_invoicelines 
GROUP BY 
    ft_invoicelines.invoiceid 
ORDER BY 
    profit DESC 
--LIMIT 10;

---------------------------------------------------------------------------------

6 - media de quantidade vendas de sempre (NOT WORKING)

SELECT 
    AVG(avg_sales) AS avg_of_avgs
FROM 
    (SELECT 
        DATE_TRUNC('month', ft_invoicelines.invoicedate) AS order_month,
				ROUND(AVG(ft_invoicelines.lineprofit), 2) AS avg_profit
			FROM 
				ft_invoicelines 
			GROUP BY 
				order_month) AS monthly_avgs;

---------------------------------------------------------------------------------

7 - top paises que mais dinheiro gastaram (DONE)

SELECT 
    dim_costumers.formalname,
    SUM(ft_invoicelines.extendedprice) AS total_spent
FROM 
    dim_costumers 
    INNER JOIN ft_invoicelines ON dim_costumers.customerkey = ft_invoicelines.customerkey
GROUP BY 
    dim_costumers.formalname 
ORDER BY 
    total_spent DESC 
--LIMIT 
--    10;

---------------------------------------------------------------------------------

8 - top marcas mais vendidas (DONE)

SELECT 
    dim_stockitems.brand, 
    SUM(ft_invoicelines.quantity) AS total_quantity
FROM 
    ft_invoicelines 
    INNER JOIN dim_stockitems ON ft_invoicelines.stockitemkey = dim_stockitems.stockitemkey
GROUP BY 
    dim_stockitems.brand 
ORDER BY 
    total_quantity DESC 
LIMIT 
    1;
		
---------------------------------------------------------------------------------

9 - qual a categoria de clientes que mais gera receita á wwi (DONE)

SELECT 
    dim_costumers.customercategoryname,
    SUM(ft_invoicelines.lineprofit) AS total_profit
FROM 
    dim_costumers
INNER JOIN ft_invoicelines ON ft_invoicelines.customerkey = dim_costumers.customerkey
GROUP BY 
    dim_costumers.customercategoryname
ORDER BY 
    total_profit DESC;
		

---------------------------------------------------------------------------------

10 - Qual produto tem sempre compras em maior quantidade de unidades? (?)

---------------------------------------------------------------------------------

11 - Qual é o período de tempo médio entre o receber do pedido e a entrega do produto? (DONE)

SELECT 
    ROUND(AVG(EXTRACT(epoch FROM (ft_invoicelines.confirmeddeliverytime - ft_orderlines.orderdate))) / 86400, 2) AS avg_diff_days
FROM 
    ft_orderlines 
    INNER JOIN ft_invoicelines ON ft_orderlines.orderid = ft_invoicelines.orderid;
		
		

---------------------------------------------------------------------------------

12 - top paises que demora mais a receber o produto? (DONE)

SELECT 
    dim_costumers.formalname,
    ROUND(AVG(EXTRACT(epoch FROM (ft_invoicelines.confirmeddeliverytime - ft_orderlines.orderdate))) / 86400, 2) AS avg_diff_days
FROM 
    dim_costumers
    INNER JOIN ft_orderlines ON dim_costumers.customerkey = ft_orderlines.customerkey
    INNER JOIN ft_invoicelines ON ft_orderlines.orderid = ft_invoicelines.orderid
GROUP BY 
    dim_costumers.formalname
ORDER BY 
    avg_diff_days DESC
--LIMIT 10;

---------------------------------------------------------------------------------

13 -  media de lucro mensal (DONE)

SELECT 
    ROUND(AVG(avg_profit), 2) AS avg_profit
FROM 
    (SELECT 
         DATE_TRUNC('month', ft_invoicelines.invoicedate) AS month,
         AVG(ft_invoicelines.lineprofit) AS avg_profit
     FROM 
         ft_invoicelines 
     GROUP BY 
         month) AS monthly_profit;

---------------------------------------------------------------------------------

14 - quantos foram os pedidos que cumpriram o prazo de expecteddeliverydate (ESTA A DAR RESULTADOS ERRADOS)

SELECT 
    (COUNT(*) FILTER (WHERE ft_invoicelines.confirmeddeliverytime <= ft_orderlines.expecteddeliverydate)::decimal 
     / COUNT(*)::decimal) * 100 AS percentage
FROM 
    ft_orderlines 
    INNER JOIN ft_invoicelines ON ft_orderlines.orderid = ft_invoicelines.orderid;

---------------------------------------------------------------------------------

15 - quantos pedidos foram feitos com stock inexistente

SELECT COUNT(*) FILTER (WHERE ft_orderlines.backorderorderid is not null ) as Backorder_Qt
FROM ft_orderlines

---------------------------------------------------------------------------------

16 - media mensal de pedidos a stock inesxistente

SELECT 
   ROUND(COUNT(*) / ((DATE_PART('year', AGE(CURRENT_DATE, MIN(ft_orderlines.orderdate)))-1) * 12 + DATE_PART('month', AGE(CURRENT_DATE, MIN(ft_orderlines.orderdate))))) AS Monthly_Backorder_Average
FROM 
   ft_orderlines 
WHERE 
   ft_orderlines.backorderorderid IS NOT NULL;

---------------------------------------------------------------------------------

17 -  qual item teve mais backorders

SELECT ft_orderlines.stockitemkey, COUNT(*) AS Number_of_Backorders
FROM ft_orderlines
WHERE ft_orderlines.backorderorderid IS NOT NULL
GROUP BY ft_orderlines.stockitemkey
ORDER BY COUNT(*) DESC
LIMIT 1;
